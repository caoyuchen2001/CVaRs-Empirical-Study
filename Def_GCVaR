import pyomo.environ as pyo

def create_gcvar_model(assets, scenarios, r, p, mu, mu0, beta, groups, weights):
    
    model = pyo.ConcreteModel(name="GCVaR_Model")

    # === Sets ===
    model.ASSETS = pyo.Set(initialize=assets)
    model.SCENARIOS = pyo.Set(initialize=scenarios)
    model.GROUPS = pyo.Set(initialize=list(groups.keys()))

    # === Parameters ===
    model.r = pyo.Param(model.SCENARIOS, model.ASSETS, initialize=r)
    model.p = pyo.Param(model.SCENARIOS, initialize=p)
    model.mu = pyo.Param(model.ASSETS, initialize=mu)
    model.mu0 = pyo.Param(initialize=mu0)
    model.beta = pyo.Param(initialize=beta)
    model.omega = pyo.Param(model.GROUPS, initialize=weights)
    model.G = pyo.Set(model.GROUPS, initialize=groups, within=model.SCENARIOS)

    # === Decision variables ===
    model.x = pyo.Var(model.ASSETS, bounds=(0.0, 1.0))
    model.eta = pyo.Var(domain=pyo.Reals)
    model.d = pyo.Var(model.SCENARIOS, domain=pyo.NonNegativeReals)

    # === Expressions ===
    def y_rule(m, t):
        return sum(m.r[t, j] * m.x[j] for j in m.ASSETS)
    model.y = pyo.Expression(model.SCENARIOS, rule=y_rule)
    model.portfolio_return = pyo.Expression(expr=sum(model.mu[j] * model.x[j] for j in model.ASSETS))

    # === Objective ===
    def obj_rule(m):
        return m.eta - (1 / m.beta) * sum(
            m.omega[k] * sum(m.p[t] * m.d[t] for t in m.G[k])
                for k in m.GROUPS
        )
    model.obj = pyo.Objective(rule=obj_rule, sense=pyo.maximize)

    # === Constraints ===
    def cvar_constraint_rule(m, t):
        return m.d[t] >= m.eta - m.y[t]
    model.cvar_constraint = pyo.Constraint(model.SCENARIOS, rule=cvar_constraint_rule)

    def return_constraint_rule(m):
        return m.portfolio_return >= m.mu0
    model.min_return = pyo.Constraint(rule=return_constraint_rule)

    def budget_constraint_rule(m):
        return sum(m.x[j] for j in m.ASSETS) == 1
    model.budget = pyo.Constraint(rule=budget_constraint_rule)

    return model
