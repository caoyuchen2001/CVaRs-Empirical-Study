import pyomo.environ as pyo

def create_cvar_model(assets, scenarios, r, p, mu, mu0, beta):
    
    model = pyo.ConcreteModel(name="CVaR_Model")
    model.ASSETS = pyo.Set(initialize=assets)
    model.SCENARIOS = pyo.Set(initialize=scenarios)
    model.r = pyo.Param(model.SCENARIOS, model.ASSETS, initialize=r)
    model.p = pyo.Param(model.SCENARIOS, initialize=p)
    model.mu = pyo.Param(model.ASSETS, initialize=mu)
    model.mu0 = pyo.Param(initialize=mu0)
    model.beta = pyo.Param(initialize=beta)

    def bound_rule(m, j):
        return (0.0, 1.0)
    model.x = pyo.Var(model.ASSETS, bounds=bound_rule)
    model.eta = pyo.Var(domain=pyo.Reals)
    model.d = pyo.Var(model.SCENARIOS, domain=pyo.NonNegativeReals)

    def y_rule(m, t):
        return sum(m.r[t, j] * m.x[j] for j in m.ASSETS)
    model.y = pyo.Expression(model.SCENARIOS, rule=y_rule)
    model.portfolio_return = pyo.Expression(
        expr=sum(model.mu[j] * model.x[j] for j in model.ASSETS)
    )

    def obj_rule(m):
        return m.eta - (1 / m.beta) * sum(m.p[t] * m.d[t] for t in m.SCENARIOS)
    model.obj = pyo.Objective(rule=obj_rule, sense=pyo.maximize)

    def cvar_constraint_rule(m, t):
        return m.d[t] >= m.eta - m.y[t]
    model.cvar_constraint = pyo.Constraint(model.SCENARIOS, rule=cvar_constraint_rule)

    def return_constraint_rule(m):
        return m.portfolio_return >= m.mu0
    model.min_return = pyo.Constraint(rule=return_constraint_rule)

    def budget_constraint_rule(m):
        return sum(m.x[j] for j in m.ASSETS) == 1
    model.budget = pyo.Constraint(rule=budget_constraint_rule)

    return model

