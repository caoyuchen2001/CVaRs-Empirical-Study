import pyomo.environ as pyo

def create_cvar_rf_model(assets_risky, assets_rf, scenarios, r, p, mu, mu_rf, mu0, beta):
    
    model = pyo.ConcreteModel(name="CVaR_RF_Model")

    # === Sets ===
    model.RISKY = pyo.Set(initialize=assets_risky)
    model.RF = pyo.Set(initialize=assets_rf)
    model.SCENARIOS = pyo.Set(initialize=scenarios)

    # === Parameters ===
    model.r = pyo.Param(model.SCENARIOS, model.RISKY, initialize=r)
    model.mu = pyo.Param(model.RISKY, initialize=mu)
    model.mu_rf = pyo.Param(model.RF, initialize=mu_rf)
    model.p = pyo.Param(model.SCENARIOS, initialize=p)
    model.mu0 = pyo.Param(initialize=mu0)
    model.beta = pyo.Param(initialize=beta)

    # === Decision Variables ===
    model.x = pyo.Var(model.RISKY, bounds=(0.0, 1.0))
    model.x0 = pyo.Var(model.RF, bounds=(0.0, 1.0))
    model.eta = pyo.Var(domain=pyo.Reals)
    model.d = pyo.Var(model.SCENARIOS, domain=pyo.NonNegativeReals)

    # === Expressions ===
    def y_rule(m, t):
        risky_return = sum(m.r[t, j] * m.x[j] for j in m.RISKY)
        rf_return = sum(m.mu_rf[j] * m.x0[j] for j in m.RF)
        return risky_return + rf_return
    model.y = pyo.Expression(model.SCENARIOS, rule=y_rule)
    model.portfolio_return = pyo.Expression(
        expr=sum(model.mu[j] * model.x[j] for j in model.RISKY) +
             sum(model.mu_rf[j] * model.x0[j] for j in model.RF)
    )

    # === Objective ===
    def obj_rule(m):
        return m.eta - (1 / m.beta) * sum(m.p[t] * m.d[t] for t in m.SCENARIOS)
    model.obj = pyo.Objective(rule=obj_rule, sense=pyo.maximize)

    # === Constraints ===
    def cvar_constraint_rule(m, t):
        return m.d[t] >= m.eta - m.y[t]
    model.cvar_constraint = pyo.Constraint(model.SCENARIOS, rule=cvar_constraint_rule)

    def return_constraint_rule(m):
        return m.portfolio_return >= m.mu0
    model.min_return = pyo.Constraint(rule=return_constraint_rule)

    def budget_constraint_rule(m):
        return sum(m.x[j] for j in m.RISKY) + sum(m.x0[j] for j in m.RF) == 1
    model.budget = pyo.Constraint(rule=budget_constraint_rule)

    return model
